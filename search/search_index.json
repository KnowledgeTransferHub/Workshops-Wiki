{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Workshops-Wiki","text":"<p>Welcome to the Workshops-Wiki repository by KTHub!</p>"},{"location":"#overview","title":"Overview","text":"<p>This repository serves as a centralized hub for all the resources related to our educational workshops. Here, you'll find source code, documentation, presentation slides, and additional materials to support your learning journey.</p>"},{"location":"#workshop-topics","title":"Workshop Topics","text":"<p>Explore our range of workshops:</p> <ul> <li>2 Day Workshop on Full Stack Development with Flask, HTML, CSS, JS and Postgres</li> <li>2 Day Workshop on Front End Development using ReactJS</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To access workshop materials, simply navigate to the respective workshop directory and explore the contents. You'll find code samples, presentations, and resources to enhance your learning experience.</p>"},{"location":"#contributions","title":"Contributions","text":"<p>We welcome contributions from our community of learners and instructors. If you have suggestions, improvements, or additional resources to share, feel free to create pull requests or issues in the respective workshop directories.</p>"},{"location":"#license","title":"License","text":"<p>This repository and its contents are licensed under MIT License.</p>"},{"location":"#contact","title":"Contact","text":"<p>If you have any questions or need assistance, please create an issue in Github with your concern/query.</p> <p>Happy learning!</p>"},{"location":"2-Day-Workshop-on-Front-End-Development/","title":"2-Day-Workshop-on-Front-End-Development","text":""},{"location":"2-Day-Worshop-on-Full-Stack-Development/","title":"2 Day Workshop on Full Stack Development with Flask, HTML, CSS, JS, and Postgres","text":"<p>Welcome to the 2 Day Full Stack Development Workshop by KTHub! This workshop will equip you with the skills to build a full-stack web application using Python Flask for the backend, HTML, CSS, and JavaScript for the frontend, and PostgreSQL as the database.</p>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/#workshop-schedule","title":"Workshop Schedule","text":""},{"location":"2-Day-Worshop-on-Full-Stack-Development/#day-1-fundamentals-and-backend-development","title":"Day 1: Fundamentals and Backend Development","text":""},{"location":"2-Day-Worshop-on-Full-Stack-Development/#session-1-introduction-and-setup-30-minutes","title":"Session 1: Introduction and Setup (30 minutes)","text":"<ul> <li>Welcome participants and introduce the workshop's objectives.</li> <li>Provide an overview of the technologies covered.</li> <li>Help attendees set up their development environment, including Python and Flask installation.</li> </ul>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/#session-2-python-flask-sample-getpostputdelete-25-hours","title":"Session 2: Python Flask - Sample GET/POST/PUT/DELETE (2.5 hours)","text":"<ul> <li>Dive into Python Flask, a powerful web framework.</li> <li>Explore the fundamental concepts of web development and RESTful APIs.</li> <li>Hands-on exercises:</li> <li>Create a Flask application.</li> <li>Implement sample CRUD operations: GET, POST, PUT, DELETE.</li> <li>Test API endpoints using tools like Postman.</li> </ul>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/#session-3-html-15-hours","title":"Session 3: HTML (1.5 hours)","text":"<ul> <li>Introduction to HTML (Hypertext Markup Language).</li> <li>Understand the structure and syntax of HTML.</li> <li>Hands-on practice:</li> <li>Create a basic HTML webpage.</li> <li>Add elements like headings, paragraphs, lists, and links.</li> </ul>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/#session-4-htmlcss-integration-15-hours","title":"Session 4: HTML/CSS Integration (1.5 hours)","text":"<ul> <li>Discuss the importance of CSS (Cascading Style Sheets) in web design.</li> <li>Create a more visually appealing webpage by integrating CSS.</li> <li>Hands-on practice:</li> <li>Link an external CSS stylesheet to the HTML page.</li> <li>Apply CSS rules to style elements.</li> <li>Explore CSS selectors, properties, and values.</li> </ul>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/#day-2-frontend-and-database-integration","title":"Day 2: Frontend and Database Integration","text":""},{"location":"2-Day-Worshop-on-Full-Stack-Development/#session-5-htmlcssjs-15-hours","title":"Session 5: HTML/CSS/JS (1.5 hours)","text":"<ul> <li>Combine HTML, CSS, and JavaScript to create interactive web pages.</li> <li>Hands-on practice:</li> <li>Create a web page with HTML structure.</li> <li>Apply CSS styles for improved presentation.</li> <li>Implement JavaScript to add interactivity.</li> </ul>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/#session-6-storing-data-json-in-file-15-hours","title":"Session 6: Storing Data (JSON in File) (1.5 hours)","text":"<ul> <li>Discuss data storage options for web applications.</li> <li>Implement data storage using JSON (JavaScript Object Notation) in a local file.</li> <li>Hands-on practice:</li> <li>Create, read, update, and delete data entries in a JSON file.</li> </ul>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/#session-7-postgresql-and-database-integration-1-hour","title":"Session 7: PostgreSQL and Database Integration (1 hour)","text":"<ul> <li>Introduce PostgreSQL, an open-source relational database.</li> <li>Discuss the advantages of using a database for data management.</li> <li>Hands-on practice:</li> <li>Set up a PostgreSQL database.</li> <li>Integrate PostgreSQL with Flask for data storage and retrieval.</li> <li>Perform CRUD operations on a real database.</li> </ul>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/#getting-started","title":"Getting Started","text":"<ol> <li>Clone or download this repository to your local machine.</li> <li>Follow the instructions in the respective session directories for hands-on exercises and code samples.</li> </ol>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic knowledge of Python, HTML, CSS, JS and SQL is recommended.</li> <li>Bring your enthusiasm and a laptop with your preferred code editor installed.</li> </ul>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/#workshop-objectives","title":"Workshop Objectives","text":"<ul> <li>Build a full-stack web application from scratch.</li> <li>Learn backend development with Python Flask.</li> <li>Create dynamic web pages using HTML, CSS, and JavaScript.</li> <li>Integrate a PostgreSQL database into your application.</li> <li>Understand how to handle API requests and store data in JSON files.</li> </ul>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/#project-highlights","title":"Project Highlights","text":"<p>As part of this workshop, you will create a full-stack web application that includes the following features:</p> <ul> <li>User registration and login functionality.</li> <li>API endpoints for user registration and authentication.</li> <li>Frontend web pages for user interaction.</li> <li>Integration with a PostgreSQL database.</li> <li>Secure storage of user credentials in a JSON file.</li> </ul>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/#contributions","title":"Contributions","text":"<p>If you find issues or have suggestions for improvements in the workshop materials, please feel free to create pull requests or issues in this repository.</p>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/#license","title":"License","text":"<p>This workshop content is licensed under the MIT License.</p>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/#contact","title":"Contact","text":"<p>If you have any questions or need assistance, please create an issue in this repository.</p> <p>Happy coding and enjoy the workshop!</p>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-db-storage-README/","title":"App with Postgres as Storage","text":"<p>This is a simple Python Flask app that provides two routes:</p> <ul> <li><code>/register</code>: This route allows users to register for an account.</li> <li><code>/login</code>: This route allows users to log in to their account.</li> </ul>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-db-storage-README/#requirements","title":"Requirements","text":"<ul> <li>Python 3.6 or higher</li> <li>Flask</li> <li>Flask-CORS</li> <li>psycopg2</li> </ul>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-db-storage-README/#installation","title":"Installation","text":"<p>To install the app, clone this repository and run the following command:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-db-storage-README/#usage","title":"Usage","text":"<p>To start the app, run the following command:</p> <pre><code>flask run\n</code></pre>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-db-storage-README/#registering-for-an-account","title":"Registering for an account","text":"<p>To register for an account, send a POST request to the /register route with the following JSON body:</p> <pre><code>{\n\"username\": \"your_username\",\n\"password\": \"your_password\"\n}\n</code></pre> <p>If the registration is successful, the app will return a JSON response with the following message:</p> <pre><code>{\n  \"message\": \"Registration successful\"\n}\n</code></pre>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-db-storage-README/#logging-in-to-an-account","title":"Logging in to an account","text":"<p>To log in to an account, send a GET request to the <code>/login</code> route with the following query parameters:</p> <ul> <li><code>username</code>: Your username</li> <li><code>password</code>: Your password</li> </ul> <p>If the login is successful, the app will return a JSON response with the following message:</p> <pre><code>{\n  \"message\": \"Login successful\"\n}\n</code></pre>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-db-storage-README/#to-add-postgresql-connectivity-to-your-flask-app-you-can-follow-these-steps","title":"To add PostgreSQL connectivity to your Flask app, you can follow these steps","text":"<ol> <li> <p>Install the psycopg2 library:</p> <p><code>bash pip install psycopg2</code></p> </li> <li> <p>Create a database connection string:</p> <p><code>python db_config = {     'host': 'localhost',     'database': 'postgres',     'user': 'postgres',     'password': 'postgres', }</code></p> </li> <li> <p>Create a function to establish a database connection:</p> <p><code>python def get_db_connection():     connection = psycopg2.connect(**db_config)     return connection</code></p> </li> <li> <p>Update your app.py file to use the database connection function:</p> <p>```Python from flask import Flask, request, jsonify from flask_cors import CORS import psycopg2</p> <p>app = Flask(name) CORS(app)</p> </li> <li> <p>Create your database schema (DDL) using a SQL client such as pgAdmin or DBeaver. The DDL you provided is for a table called users with three columns: id, username, and password.</p> <p><code>sql CREATE TABLE users (     id serial PRIMARY KEY,     username VARCHAR (80) UNIQUE NOT NULL,     password VARCHAR (80) NOT NULL );</code></p> </li> <li> <p>Start your Flask app:</p> <p><code>bash flask run</code></p> </li> </ol> <p>You can now test the user registration endpoint using a tool such as Postman:</p>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-db-storage-README/#get-a-database-connection","title":"Get a database connection","text":"<p>connection = get_db_connection()</p>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-db-storage-README/#route-for-user-registration","title":"Route for user registration","text":"<p>@app.route('/register', methods=['POST']) def register(): data = request.get_json() username = data.get('username') password = data.get('password')</p> <p>if not username or not password:     return jsonify({'message': 'Username and password are required'}), 400</p> <p>cursor = connection.cursor()</p>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-db-storage-README/#check-if-the-username-is-already-taken","title":"Check if the username is already taken","text":"<p>cursor.execute(\"SELECT * FROM users WHERE username = %s\", (username,)) existing_user = cursor.fetchone() if existing_user:     cursor.close()     return jsonify({'message': 'Username already exists'}), 400</p>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-db-storage-README/#insert-the-new-user-into-the-database","title":"Insert the new user into the database","text":"<p>cursor.execute(     \"INSERT INTO users (username, password) VALUES (%s, %s)\", (username, password)) connection.commit()</p> <p>cursor.close() return jsonify({'message': 'Registration successful'}), 201 ```</p>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-db-storage-README/#post-httplocalhost5000register","title":"POST http://localhost:5000/register","text":"<pre><code>Content-Type: application/json\n\n{\n  \"username\": \"johndoe\",\n  \"password\": \"password123\"\n}\n</code></pre> <p>If the registration is successful, Postman will return a JSON response with the following message:</p> <pre><code>{\n  \"message\": \"Registration successful\"\n}\n</code></pre> <p>It is similar for login as well.</p>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-db-storage-README/#deployment","title":"Deployment","text":"<p>To deploy the app, run the below command</p> <pre><code>python3 app-with-db-storage.py\n</code></pre>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-json-storage-README%20copy/","title":"App with Local JSON file as Storage","text":"<p>This is a simple Python Flask app that provides two routes:</p> <ul> <li><code>/register</code>: This route allows users to register for an account.</li> <li><code>/login</code>: This route allows users to log in to their account.</li> </ul>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-json-storage-README%20copy/#requirements","title":"Requirements","text":"<ul> <li>Python 3.6 or higher</li> <li>Flask</li> <li>Flask-CORS</li> <li>psycopg2</li> </ul>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-json-storage-README%20copy/#installation","title":"Installation","text":"<p>To install the app, clone this repository and run the following command:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-json-storage-README%20copy/#usage","title":"Usage","text":"<p>To start the app, run the following command:</p> <pre><code>flask run\n</code></pre>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-json-storage-README%20copy/#registering-for-an-account","title":"Registering for an account","text":"<p>To register for an account, send a POST request to the /register route with the following JSON body:</p> <pre><code>{\n\"username\": \"your_username\",\n\"password\": \"your_password\"\n}\n</code></pre> <p>If the registration is successful, the app will return a JSON response with the following message:</p> <pre><code>{\n  \"message\": \"Registration successful\"\n}\n</code></pre>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-json-storage-README%20copy/#logging-in-to-an-account","title":"Logging in to an account","text":"<p>To log in to an account, send a GET request to the <code>/login</code> route with the following query parameters:</p> <ul> <li><code>username</code>: Your username</li> <li><code>password</code>: Your password</li> </ul> <p>If the login is successful, the app will return a JSON response with the following message:</p> <pre><code>{\n  \"message\": \"Login successful\"\n}\n</code></pre> <p>You can now test the user registration endpoint using a tool such as Postman:</p>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-json-storage-README%20copy/#post-httplocalhost5000register","title":"POST http://localhost:5000/register","text":"<pre><code>Content-Type: application/json\n\n{\n  \"username\": \"johndoe\",\n  \"password\": \"password123\"\n}\n</code></pre> <p>If the registration is successful, Postman will return a JSON response with the following message:</p> <pre><code>{\n  \"message\": \"Registration successful\"\n}\n</code></pre> <p>It is similar for login as well.</p>"},{"location":"2-Day-Worshop-on-Full-Stack-Development/code/backend/app-with-json-storage-README%20copy/#deployment","title":"Deployment","text":"<p>To deploy the app, run the below command</p> <pre><code>python3 app-with-db-storage.py\n</code></pre>"}]}